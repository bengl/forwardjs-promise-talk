{"top":0, "left":0, "center": "auto", "notes": 12345, "sizing_slide": true, "next": 54321}
===
{bold}Hello!{/bold}
&&&
Hi everybody and welcome to ForwardJS.
---
{bold}Bryan English

@bengl{/bold}
&&&
My name is Bryan English and you can find me online everywhere with this
username.
---
{bold}   ⣀⣀⣀⣀⣀                 ⣠⡄        {/bold}
{bold}   ⠛⣿⣿⠛⠿⣿⣦⣄       ⢰⣷⡀   ⢸⣿⡇ ⢰⣷⡀    {/bold}
{bold} ⣠⣄ ⢸⣿⡄  ⠙⣿⣆  ⢀⣀⡀ ⢸⣿⣷   ⣿⣿⠁⢀⣿⢿⣇    {/bold}
{bold}⠈⠛⠉ ⢸⣿⡇   ⢹⣿⢀⣾⠟⠛⣿⡆⢸⣿⢿⣧  ⣿⣿ ⣸⡟⢘⣿⣄⣀  {/bold}
{bold} ⢠⣦ ⢸⣿⡇   ⣾⡿⠸⣿⣴⡾⠟⠁⢸⣿ ⢻⣧⡀⣿⡇⢀⣿⠛⠛⢿⣟⠁  {/bold}
{bold}    ⢸⣿⡇⣀⣤⣾⡿⠁ ⠻⢷⣤⣶⠾⢸⣿⡄ ⠻⣿⣿⡇⢸⣿  ⢸⣿⡀  {/bold}
{bold}  ⠐⣿⣿⣿⣿⡿⠟⠉        ⠈⢿⠇  ⠙⠿⠁⠸⠿   ⠻⠃  {/bold}
{bold}   ⠈⠉⠉                             {/bold}
&&&
I work at DeNA which is a big Japanese mobile gaming company with offices here
in San Francisco. All of our game servers use Node.js, and I'm the lead eningeer
for our common server tech team.

Of course, we're hiring like crazy so if any of the stuff I talk about today is
interesting to you, find me after this and let's talk.
---
{bold}I "Promise" to be Backward Compatible{/bold}
&&&
I'm here today to talk about converting existing APIs over to using promises
both internally and externally, which is a process we've been going through at
DeNA for the past few months.

Our team builds a set of common game server code that game teams can use
as kind of a RAD tool for servers. Originally, all of our asynchronous API
functions would call callbacks, like you'd expect. But we started experimenting
with promises and fell in love with the API style, so we embarked on a process
to convert everything over.

We wanted the consumers of our API, who are all internal teams, to be able to
be able to convert at their own pace after we'd finished our work, so backward
compatibility was a pretty high concern.

I realize I probably have the only talk at ForwardJS with backward in the title,
but I think it's reasonable, since in many cases backward compatibility is the
responsible way of moving forward.
---
{bold}What's a Promise?{/bold}
&&&
Most of you probably already know what promises are, but on the off-chance
you don't, let's do a a really quick intro to get everyone on the same page.
---
"A {bold}{yellow}promise{/yellow}{/bold} represents the eventual result of an
 asynchronous operation."
    -- Promises/A+

"A {bold}{yellow}Promise{/yellow}{/bold} is an object that is used as a placeholder
 for the eventual results of a deferred (and possibly
 asynchronous) computation."
    -- ES6 Draft
&&&
That pretty much says it. These guys say it better than I will.
---
 ┌───────────┐          ┌───────────┐
 │ Pending   ├────┬────>│ Fulfilled │
 └───────────┘    │     └───────────┘
                  │
                  │     ┌───────────┐
                  └────>│ Rejected  │
                        └───────────┘
&&&
The most important thing about them is that they can have 3 different states:
Pending, fulfilled or rejected.

Once a promise moves from the pending state into one of the other two states,
that's it's final state. It can't move from there.

Fulfilled promises can have a value associated with them, which you can think of
as a return value. Rejected promises have an associated value called a reason,
which in any reasonably good code is an instance of the builtin Error class.
---
{yellow}{inverse}      {/inverse}{/yellow}
{yellow}{inverse}      {/inverse}{/yellow}
{yellow}{inverse}  then{/inverse}{/yellow}
&&&
The second most important thing about them is that they have a method called
`then`, which is where a lot of the magic happens.
---
{code:javascript}
getSomethingAsync() // returns a promise
.then(
  function(result){ // onFullfilled
    console.log('woohoo, result!', result);
  },
  function(err){ // onRejected
    console.error('oh noez!', err.stack);
  }
);
{/code}
&&&
`then` takes 2 arguments and both are functions.

In this example, we're assuming that `getSomethingAsync()` is a function that
returns a promise.

The first takes in the fulfilled value of the promise, kind of like the second 
argument of callbacks in node.

The second takes in an error object, kind of like the first argument of
callbacks in node.

Only one of these two functions gets executed. All promises either fullfill or
reject, not both.
---
{code:javascript}
getSomethingAsync()
.then(function(result){
  console.log('woohoo, result!', result);
})
.catch(function(err){
  console.error('oh noez!', err.stack);
});

{/code}
&&&
We also have this alternative syntax, which makes it much more clear which
function is which. Both functions are always optional on then, and
`catch` is equivalent to calling `then` with only the second argument.
---
{code:javascript}
getSomethingAsync()
.then(function(value){
  return value + 1;
})
.then(function(result){
  console.log('woohoo, result!', result);
})
.catch(function(err){
  console.error('oh noez!', err.stack);
});
{/code}
&&&
`then` also returns a promise, so we can chain them like this. The promise
returned by then will fullfill with the value returned by it ...
---
{code:javascript}
getSomethingAsync()
.then(function(value){
  return getSomethingElseAsync();
})
.then(function(result){
  console.log('woohoo, result!', result);
})
.catch(function(err){
  console.error('oh noez!', err.stack);
});
{/code}
&&&
or if you return a promise, whatever that fulfills to.

If you throw an error inside `then`, the promise returned by it will reject.
A rejection is caught by the first `catch` or rejection callback that comes
after it in a promise chain.
---
{bold}Let's use promises!{/bold}
&&&
Great! So now hopefully by this point you're convinced that Promises are awesome
and you want to use them for your project.

Unfortunately, if you're like me, you have a mountain of really ancient code to
deal with.

It turns out it's not necessarily straightforward to convert things over to
support promises.

Let's start from the bottom. Somewhere, we're going to have to use a function
that returns a promise. Unfortunately, no node builtins and very few modules on
NPM actually support promises.
---
{bold}Where do promises come from?{/bold}
&&&
So what do you do?

You could start wrapping existing APIs with the promise constructor, but you may
have noticed I didn't yet mention how to use the promise constructor. That's
because in most cases you'll never have to use it. Thanks to...
---
      Bluebird!{blue}
                      .--.
                    ."  o \__
                 _.-"    ,(  `
             _.-"      ,;;|
        _.-=" _,"    ,,;;;'
    .-"`_.-"``-..,,;;;;:'
    `"'`          `\`\
                   /^\\\{/blue}
&&&
Bluebird is an implementation of promises written by a mad scientist named
Petka Antonov. It also has a bunch of nice helper functions in it to get you
going with promises.

Because Promises are in ES6 now, some environments are starting to support
Promises natively, so eventually we might not have to use libraries like
Bluebird, but for now, Bluebird is by far the fastest implementation of promises
and provides enough extra goodies that we decided to run with it at DeNA, and
we've been pretty happy with it.
---
$ npm install --save bluebird{pause}
{code:javascript}
var Promise = require('bluebird');
{/code}
&&&
To use bluebird, just npm install it ... and then require it as Promise like
this.
---
{code:javascript}
var Promise = require('bluebird');
var fs = require('fs');
var readFile = Promise.promisify(fs.readFile);    

readFile('stuff.json', {encoding: 'utf8'})
.then(JSON.parse)
.then(function(stuff){
  console.log(stuff.thing);
});
{/code}
&&&
This is one of the most important features of bluebird. `Promisify` wraps a
function up so that instead of taking in a callback as the last parameter, you
can omit the last parameter and it will return a promise instead.
---
{code:javascript}
var Promise = require('bluebird');
var fs = Promise.promisifyAll(require('fs'));


fs.readFileAsync('stuff.json', {encoding: 'utf8'})
.then(JSON.parse)
.then(function(stuff){
  console.log(stuff.thing);
});
{/code}
&&&
We can also use `promisifyAll` on the `fs` object instead. It wraps an existing
module (or really just any object) and gives it back with promisified versions
of all its methods. It tosses the suffix `Async` on there to tell them apart
from the original methods, which are still included.

Notice that in this example I've put JSON.parse directly into `then`. This works
because JSON takes in one argument and returns something, so that gets passed
down the chain.
---
{bold}What about Backward Compatibility?{/bold}
&&&
So when you're adapting your code to use promises, you're probably going to want
to be backward compatible, at least for some amount of time depending on your
release schedule. It turns out Bluebird actually makes this really easy for
simple cases.
---
{bold}Promise.prototype.nodeify{/bold}
&&&
Bluebird and some other libraries provide a method called `nodeify` that's
pretty great for building APIs that support both promises and node's typical
continuation-passing style.

What nodeify will do is check if the value passed in is a function. If it is,
it'll call the function based on whether it fulfills or rejects. In a
fulfillment case, it'll call the function with te second parameter being the
fulfilled value. In the rejection case, the rejection reason, which should be
an error object, will be passed in as the first parameter.
---
{code:javascript}
function myFunc(someArg, cb){
  doSomething(someArg, function(err, data){
    if (err) return cb(err);
    doSomethingElse(data, cb);
  });
}
{/code}
&&&
So let's say you had an existing API which looked something like this.
---
{code:javascript}
function myFunc(someArg){
  return doSomethingAsync(someArg)
  .then(function(data){
    return doSomethingElseAsync(data);
  });
}
{/code}
&&&
And now you converted it to return a promise.

Here we're assuming that doSomething and doSomethingElse are from some external
library that we've called `promisifyAll` on, so we get these Async-suffixed
versions.
---
{code:javascript}
function myFunc(someArg, cb){
  return doSomethingAsync(someArg)
  .then(function(data){
    return doSomethingElseAsync(data);
  }).nodeify(cb);
}
{/code}
&&&
Now you can add nodeify at the end of the returned promise so that the original
callback style is still supported. Yay for backward compatibility!

So again if the callback is omitted, this functions exactly the same as if you
didn't put the nodeify call at the end.
---
Too Simple!
&&&
The examples I've shown so far are pretty simple. In the real world, all kinds
of things happen that are a bit more complex.
---
{code:javascript}
function myNotFunFunc(hook, cb){  
  // ...
  hook(function(){
    // ...
    cb();
  });
}
{/code}
&&&
For example, you might have a function in your API that takes in some kind of
async hook function that runs in some part of the process of completing.
---
{code:javascript}
function myNotFunFunc(hook){      
  // ...
  return hook()
  .then(function(){
    // ...
  });
}
{/code}
&&&
When converting your code an API to use promises, it would be nice to be able to
just call the hook as if it returns a promise.
---
{code:javascript}
function myNotFunFunc(hook, cb){  
  // ...
  return hook()
  .then(function(){
    // ...
  }).nodeify(cb);
}
{/code}
&&&
Unfortunately, you don't know if that the case if you're trying to remain
backward compatible.

The hook function might return a promise, or it might call a callback. You don't
know because you've promised the consumers of your API that it will be backward
compatible, and that includes hook functions that get executed mid-function like
this.

So how do we solve this?
---
{code:javascript}
function myNotFunFunc(hook, cb){
  // ...
  return Promise.promisify(hook)()
  .then(function(){
    // ...
  }).nodeify(cb);
}
{/code}
&&&
You could start by using Bluebird's promisify function, but that only works if
you know for sure that the hook will call a callback. Once again this isn't
good enough.

But we're really close.
---
{code:javascript}
function promisify(func, context){
  return function(){
    var args = [].slice.call(arguments);
    return new Promise(function(fulfill, reject){
      args.push(function(err, result){
        if (err) reject(err);
        else fulfill(result);
      });
      func.apply(context, args);
    });
  };
}

{/code}
&&&
Let's look at a simplified version of the promisify function.

One interesting thing here is that we're using the Promise constructor, which
takes in a function that gets fullfill and reject functions passed to it, so you
can do whatever async operations you want inside as long as you eventually call
fulfill or reject. I haven't shown you this constructor until now because most
of the time you don't need it. Bluebird and other libraries make it easy enough
to wrap existing async APIs without having to bother with this constructor, but
for this case, we need it.

Basically, return a function that passes its arguments to the original function,
but wrapped up inside a promise. We add callback to the arguments that fulfills
or rejects the promise. Then we go ahead and call it.

So what we really want is something that will either promisify or just pass
through if the function does return a promise.
---
{code:javascript}
function maybePromisify(func, context){
  return function(){
    var args = [].slice.call(arguments);
    return new Promise(function(fulfill, reject){
      args.push(function(err, result){
        if (err) reject(err);
        else fulfill(result);
      });
      var p = func.apply(context, args);
      if (p && p.then) { fulfill(p); }
    });
  };
}
{/code}
&&&
This is really easy. All we do is check the value returned by the function. If
it quacks like a promise, then we go ahead and fulfill it, so the top-level
promise here will assume the fullfilled state of the promise 'p'.

So basically, we pass on the fulfilled value to the returned promise if there is
one, and if not, the callback should end up being called, doing its job to call
fulfill or reject.

So one interesting thing that we ran into with this approach is what happens
when you pass in an already nodeified function. That is, one that calls a
callback if available and returns a promise.

In that case, since the promise is returned before the callback is called
(assuming a truly async function), the second fulfill call in this code happens
first. It's important here to note that once a promise has gone into a fulfilled
or rejected state, the the fulfill and reject functions become no-ops, so
everything is fine.

So this is obviously a rather optimistic version of this. For one thing, it
assumes that if the returned object has a property `then` on it, then it's a
promise.
---
{code:javascript}
function myNotFunFunc(hook, cb){
  // ...
  return maybePromisify(hook)()
  .then(function(){
    // ...
  }).nodeify(cb);
}
{/code}
&&&
So let's look at that in our original example.

I've replaced the call to bluebird's promisify with our `maybePromisify`, and
that's all it takes. Now this function can either take a callback or return a
promise, and the hook function can also do the same.
---
{bold}Callback Hell Avoidance{/bold}
&&&
Before we moved over to promises, most of our code took advantage of the hugely
popular async.js library to deal with what most of us call callback hell.

So let's go over some of the often-used parts of async and how to express them
using promises instead. A lot of this stuff isn't new, but it's worth mentioning
here for completion's sake in a talk about convert your code to use promises.
---
{code:javascript}
async.parallel([
  function(next){
    obj.doSomething1(next);
  },
  function(next){
    obj.doSomething2(next);
  }
], cb);
{/code}
&&&
Here's your typical async.parallel example.

We're assuming that doSomething 1 and 2 are functions that take callbacks and do
something asynchronously and independently.

If your functions don't require any context, that's great, and you could just
pass them directly into async.parallel, but often that isn't the case, so you
end up wrapping these guys in functions like this.
---
{code:javascript}
Promise.all([
  obj.doSomething1(),
  obj.doSomething2()
]);
{/code}
&&&
The promise version of this is much simpler. Most promise libraries provide the
all function, which takes in an array of promises and returns a promise that
fulfills if and when all of the promises in the array have fulfilled, and with a
value that's an array of the fulfilled values.

If any of these promises reject, the returned promise rejects with that reason.

The great thing here is that we're passing in promises, not functions.
That means we don't have to do any shenanigans like wrapping them up in
functions to preserve context, which is great!
---
{code:javascript}
async.waterfall([
  function(next){
    obj.doSomething1(next);
  },
  function(someValue, next){
    obj.doSomething2(someValue, next);
  }
], cb);
{/code}
&&&
Here's your typical async.waterfall example. An async.series example would be
pretty much the same thing, except without 'someValue'. We're assuming that
'doSomething1' is going to call 'next' with 'someValue' in the second parameter.
---
{code:javascript}
obj.doSomething1()
.then(function(someValue){
    return obj.doSomething2(someValue);
});
{/code}
&&&
The promise example is simpler again. Chaining your then functions is pretty
equivalent to doing an async.waterfall, so this one is pretty much a no-brainer.
---
{code:javascript}
async.waterfall(arrayOfFunctions, cb);
{/code}
&&&
Sometimes you have some dynamically generated array of functions, so you can't
just throw together a bunch of thens.

It turns out the promise version of this isn't that hard.
---
{code:javascript}
arrayOfFunctions
.reduce(function(previous, current){
  return previous.then(current);
}, Promise.resolve());
{/code}
&&&
In reasonable and newer JS environments, arrays have a reduce function so this
works. We're basically just building up the then chain, starting it off with
a fulfilled promise.

Promise.resolve() returns a fulfilled promise, which we need to start off the
chain if we don't assume that the first function in the chain returns a promise.
---
{code:javascript}
Promise.resolve()
.then(arrayOfFunctions[0])
.then(arrayOfFunctions[1])
.then(arrayOfFunctions[2])
// ...
{/code}
&&&
So what we're effectively building is a chain that looks something like this,
where we keep passing the next function in the array to then. This turns out to
be useful when building things that resemble, for example, express's middleware
chain, where not-yet determined number of asynchronous functions are called in
series.
---
{code:javascript}
var count = 0;
async.whilst(
  function(){
    return count < 5;
  },
  function(next){
     count++
     doSomething(next);
  },
  cb
);
{/code}
&&&
async.whilst is pretty useful when you want an async loop that stops under some
condition.

In this example i'm making sure that the asynchronous function `doSomething`
runs exactly 5 times, waiting for completion before starting the next iteration.

It would of course be great to have a promise version of this.
---
{code:javascript}
function whilst(condition, action) {
  return (function loop(){
    if (condition()) {
      return action().then(loop);
    }
  })();
}
{/code}
&&&
For a general case, a function like this might help. Here we're making the
assumption that action always returns a promise. When condition returns true,
it will call action and tack a then onto the promise that's returned, which
will just loop again. If condition returns false, nothing happens and this
promise chain is over.
---
{code:javascript}
var count = 0;
whilst(
  function(){
    return count < 5;
  },
  function(){
    count++;
    return doSomething();
  }
);
{/code}
&&&
Here's our new whilst function in action. It ends up looking a lot like the
async.js version, but with no callbacks.





At DeNA we found ourselves doing a lot of these sorts of tasks over and over
again, so we put togther a library of them.
---
      Thrush!{red}
                      .--.
                    ."  o \__
                 _.-"    ,(  `
             _.-"      ,;;|
        _.-=" _,"    ,,;;;'
    .-"`_.-"``-..,,;;;;:'
    `"'`          `\`\
                   /^\\\{/red}
&&&
For those unfamiliar with bird species, bluebirds are part of the 'thrush'
family, so we thought this would be a good name.
---
http://github.com/DeNA/thrush{pause}

$ npm install --save thrush
{pause}
{code:javascript}
var Promise = require('thrush');
{/code}
&&&
You can find this module on our github org .. and you can npm install it ...
and you can use it just like you would use bluebird. It's actually an extension
of bluebird, so all of bluebird's methods are available on it.
---
{pause}Promise.safelyPromisify{pause}

Promise.series{pause}

Promise.whilst
&&&
We've added a few methods on top of bluebird ...
The first is safelyPromisify, which is basically the maybePromisify function I
showed you earlier, with some extra logic around domains that we needed ...
Then we've got series, which is just a thin wrapper around reduce, like I showed
you before. ...
We've also got whilst, which I just showed you, and a few other small helper
functions to make things easier for us to convert APIs from async.js-heavy code
to Promise-heavy code.
---
{bold}More Edge Cases{/bold}
&&&
Depending on how you designed your API to begin with, you might run into some
snags when converting your code to promises.

For us, a lot of these came from the fact that with promises, you can only pass
one fulfilled value, and either that or a rejection reason, but not both.
---
{code:javascript}
function getThings(cb) {
  doDomething1(function(err, result1){
    if (err) return cb(err);
    doSomething2(function(err, result2){
      if (err) return cb(err);
      cb(null, result1, result2);
    });
  });
}
{/code}
&&&
Here we have a case where the callback is called with 2 different result objects.
This is something that can happen in all kinds of places for all kinds of
reasons, and is actually in some popular libraries on NPM as well.

So what do you do to convert such a thing?

If we try to run promisify on this function, what it will actually do is pass
both results as an array, so it only counts as one value. This is the kind of
behavior we decided was best to emulate, because it meant we could use other
Bluebird functions later on.
---
{code:javascript}
function getThings() {
  var result1;
  return doDomething1Async()
  .then(function(_result1){
    result1 = _result1;
    return doSomething2Async();
  })
  .then(function(result2){
    return [result1, result2];
  });
}
{/code}
&&&
And here's what this might look like. Notice I've brought result1 into a higher
scope so that we have access to it in the last then-block. We could have also
passed it in the fulfilled value for the previous then-block.
---
{code:javascript}
getThings().then(function(results){
  console.log(results[0], "result1");
  console.log(results[1], "result2");
});
{/code}
&&&
Now when we call getThings, it will fulfill with an array with both results.
---
{code:javascript}
getThings().spread(function(result1, result2){
  console.log(result1, "result1");
  console.log(result2, "result2");
});
{/code}
&&&
We also have the spread function which is the same as then, except the values in
the array are used as parameters for the function.
---
{code:javascript}
function getThings(cb) {
  var result1;
  return doDomething1Async()
  .then(function(_result1){
    result1 = _result1;
    return doSomething2Async();
  })
  .then(function(result2){
    return [result1, result2];
  }).nodeify(cb, {spread: true});
}
{/code}
&&&
Coming back to backward compatibility... When we add nodeify here, we can pass
in an argument letting it know that the node callback should be called with the
elements of the fulfilled value as function arguments.
---
{bold}Stack Traces{/bold}
&&&
As anyone who write a lot of node.js code knows, stack traces usually end a
little earlier than we'd like, basically whenever the execution was started
by some libuv event.
---
{code:javascript}
doSomethingAsync()
.then( /* ... */ )
.then( /* ... */ )
.then(function(){
  throw new Error('bad');
})
.catch(function(err){
  console.error(err.stack);
});
{/code}
---
Error: bad
    at test.js:5:9
    at tryCatch1 (in Bluebird)
    at Promise$_callHandler (in Bluebird)
    at Promise$_settlePromiseFromHandler (in Bluebird)
    at Promise$_settlePromiseAt (in Bluebird)
    at Promise$_settlePromises (in Bluebird)
    at Async$_consumeFunctionBuffer (in Bluebird)
    at Async$consumeFunctionBuffer (in Bluebird)
    at process._tickCallback (node.js:415:13)
    at Function.Module.runMain (module.js:499:11)
---
Error: bad
    at test.js:5:9
    at Function.Module.runMain (module.js:499:11)
From previous event:
    at Object.<anonymous> (test.js:1:81)
    at Module._compile (module.js:456:26)
    at Object.Module._extensions..js (module.js:474:10)
    at Module.load (module.js:356:32)
    at Function.Module._load (module.js:312:12)
    at Function.Module.runMain (module.js:497:10)
    at startup (node.js:119:16)
    at node.js:902:3
---
BLUEBIRD_DEBUG=1{pause}
{code:javascript}
Promise.longStackTraces();
{/code}
---
{bold}Mocha{/bold}
&&&
Double your tests
---
{code:javascript}
it('does something', function(done){
  return doSomething()
  .then(function(value){
    assert.ok(value);
  }).nodeify(done);
});
{/code}
&&&
< v1.18.0
---
{code:javascript}
it('does something', function(){    
  return doSomething()
  .then(function(value){
    assert.ok(value);
  });
});
{/code}
&&&
v1.18.0
---
{bold}Is it all of this worth it?{/bold}
&&&
Obviously this kind of conversion is going to take time, and it definitely did.
It took us several months while working on other things to get this done.

The best way we can measure the success of this sort of thing is to see how
happy our API consumers are.

Luckily, the people actually using our APIs seem much happier using Promises.
They feel like they're writing less boilerplate, and having seen some of the
benchmarks, they're pretty excited about potential performance improvements over
our previous implementations.

They're also happy that we've maintained backward compatibility thus far, so
that they can convert their own code at their own pace.
---
{bold}The End{/bold}
---
http://github.com/bengl/forwardjs-promise-talk{pause}

$ npm install -g forwardjs-promise-talk
$ forwardjs-promise-talk
&&&
Notes from yusuke:
* domains
